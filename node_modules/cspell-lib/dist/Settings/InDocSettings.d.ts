import type { CSpellUserSettings } from '@cspell/cspell-types';
import { Sequence } from 'gensequence';
import { ExtendedSuggestion } from '../Models/Suggestion';
export type CSpellUserSettingsKeys = keyof CSpellUserSettings;
export interface DirectiveIssue {
    /**
     * the start and end offsets within the document of the issue.
     */
    range: [start: number, end: number];
    /**
     * The text causing the issue.
     */
    text: string;
    message: string;
    suggestions: string[];
    suggestionsEx: ExtendedSuggestion[];
}
export declare function getInDocumentSettings(text: string): CSpellUserSettings;
export declare function validateInDocumentSettings(docText: string, _settings: CSpellUserSettings): Iterable<DirectiveIssue>;
export declare const regExSpellingGuardBlock: RegExp;
export declare const regExSpellingGuardNext: RegExp;
export declare const regExSpellingGuardLine: RegExp;
declare function parseCompoundWords(match: string): CSpellUserSettings;
declare function parseWords(match: string): CSpellUserSettings;
declare function parseIgnoreWords(match: string): CSpellUserSettings;
declare function parseIgnoreRegExp(match: string): CSpellUserSettings;
declare function getPossibleInDocSettings(text: string): Sequence<RegExpExecArray>;
declare function getWordsFromDocument(text: string): string[];
export declare function getIgnoreWordsFromDocument(text: string): string[];
export declare function getIgnoreRegExpFromDocument(text: string): (string | RegExp)[];
/**
 * These internal functions are used exposed for unit testing.
 */
export declare const internal: {
    getPossibleInDocSettings: typeof getPossibleInDocSettings;
    getWordsFromDocument: typeof getWordsFromDocument;
    parseWords: typeof parseWords;
    parseCompoundWords: typeof parseCompoundWords;
    parseIgnoreRegExp: typeof parseIgnoreRegExp;
    parseIgnoreWords: typeof parseIgnoreWords;
};
export {};
//# sourceMappingURL=InDocSettings.d.ts.map