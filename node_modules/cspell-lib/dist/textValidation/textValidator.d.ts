import { SpellingDictionary } from 'cspell-dictionary';
import { Sequence } from 'gensequence';
import type { ValidationResult } from '../Models/ValidationResult';
import * as TextRange from '../util/TextRange';
import type { IncludeExcludeOptions, LineSegment, ValidationOptions } from './ValidationTypes';
export declare const defaultMaxNumberOfProblems = 200;
export declare const defaultMaxDuplicateProblems = 5;
export declare const defaultMinWordLength = 4;
export declare const minWordSplitLen = 3;
/**
 * @deprecated
 * @deprecation Use spellCheckDocument
 */
export declare function validateText(text: string, dict: SpellingDictionary, options: ValidationOptions): Sequence<ValidationResult>;
export declare function calcTextInclusionRanges(text: string, options: IncludeExcludeOptions): TextRange.MatchRange[];
/**
 * Returns a mapper function that will segment a TextOffset based upon the includeRanges.
 * This function is optimized for forward scanning. It will perform poorly for randomly ordered offsets.
 * @param includeRanges Allowed ranges for words.
 */
export declare function mapLineSegmentAgainstRangesFactory(includeRanges: TextRange.MatchRange[]): (lineSeg: LineSegment) => LineSegment[];
export declare const _testMethods: {
    mapWordsAgainstRanges: typeof mapLineSegmentAgainstRangesFactory;
};
//# sourceMappingURL=textValidator.d.ts.map