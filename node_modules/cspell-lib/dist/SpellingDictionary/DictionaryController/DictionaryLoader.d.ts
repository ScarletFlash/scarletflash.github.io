import { SpellingDictionary } from 'cspell-dictionary';
import { CSpellIO } from 'cspell-io';
import { DictionaryDefinitionInternal } from '../../Models/CSpellSettingsInternalDef';
export type LoadOptions = DictionaryDefinitionInternal;
export declare class DictionaryLoader {
    private cspellIO;
    private dictionaryCache;
    private dictionaryCacheByDef;
    private reader;
    private readerSync;
    constructor(cspellIO: CSpellIO);
    loadDictionary(def: DictionaryDefinitionInternal): Promise<SpellingDictionary>;
    loadDictionarySync(def: DictionaryDefinitionInternal): SpellingDictionary;
    /**
     * Check to see if any of the cached dictionaries have changed. If one has changed, reload it.
     * @param maxAge - Only check the dictionary if it has been at least `maxAge` ms since the last check.
     * @param now - optional timestamp representing now. (Mostly used in testing)
     */
    refreshCacheEntries(maxAge?: number, now?: number): Promise<void>;
    private getCacheEntry;
    private setCacheEntry;
    private refreshEntry;
    private loadEntry;
    private loadEntrySync;
    private getStat;
    private getStatSync;
    private isEqual;
    private normalizeOptions;
}
//# sourceMappingURL=DictionaryLoader.d.ts.map